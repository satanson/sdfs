// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type INodeInfoRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsINodeInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *INodeInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &INodeInfoRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *INodeInfoRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *INodeInfoRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *INodeInfoRequest) InodeID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *INodeInfoRequest) Size() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *INodeInfoRequest) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *INodeInfoRequest) NetBlockCap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *INodeInfoRequest) MutateNetBlockCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *INodeInfoRequest) MemBlockCap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *INodeInfoRequest) MutateMemBlockCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func INodeInfoRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func INodeInfoRequestAddInodeID(builder *flatbuffers.Builder, InodeID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(InodeID), 0)
}
func INodeInfoRequestAddSize(builder *flatbuffers.Builder, Size int32) {
	builder.PrependInt32Slot(1, Size, 0)
}
func INodeInfoRequestAddNetBlockCap(builder *flatbuffers.Builder, NetBlockCap int32) {
	builder.PrependInt32Slot(2, NetBlockCap, 0)
}
func INodeInfoRequestAddMemBlockCap(builder *flatbuffers.Builder, MemBlockCap int32) {
	builder.PrependInt32Slot(3, MemBlockCap, 0)
}
func INodeInfoRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
