// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type INodeNetBlockInfoRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsINodeNetBlockInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *INodeNetBlockInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &INodeNetBlockInfoRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *INodeNetBlockInfoRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *INodeNetBlockInfoRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *INodeNetBlockInfoRequest) InodeID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *INodeNetBlockInfoRequest) NetBlockIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *INodeNetBlockInfoRequest) MutateNetBlockIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *INodeNetBlockInfoRequest) Cap() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *INodeNetBlockInfoRequest) MutateCap(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func INodeNetBlockInfoRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func INodeNetBlockInfoRequestAddInodeID(builder *flatbuffers.Builder, InodeID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(InodeID), 0)
}
func INodeNetBlockInfoRequestAddNetBlockIndex(builder *flatbuffers.Builder, NetBlockIndex int32) {
	builder.PrependInt32Slot(1, NetBlockIndex, 0)
}
func INodeNetBlockInfoRequestAddCap(builder *flatbuffers.Builder, Cap int32) {
	builder.PrependInt32Slot(2, Cap, 0)
}
func INodeNetBlockInfoRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
