// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NetBlockPWriteRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsNetBlockPWriteRequest(buf []byte, offset flatbuffers.UOffsetT) *NetBlockPWriteRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NetBlockPWriteRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NetBlockPWriteRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NetBlockPWriteRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NetBlockPWriteRequest) NetBlockID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NetBlockPWriteRequest) Offset() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetBlockPWriteRequest) MutateOffset(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *NetBlockPWriteRequest) Length() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NetBlockPWriteRequest) MutateLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *NetBlockPWriteRequest) TransferBackends(obj *NetBlockBackend, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *NetBlockPWriteRequest) TransferBackendsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NetBlockPWriteRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NetBlockPWriteRequestAddNetBlockID(builder *flatbuffers.Builder, NetBlockID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NetBlockID), 0)
}
func NetBlockPWriteRequestAddOffset(builder *flatbuffers.Builder, Offset int32) {
	builder.PrependInt32Slot(1, Offset, 0)
}
func NetBlockPWriteRequestAddLength(builder *flatbuffers.Builder, Length int32) {
	builder.PrependInt32Slot(2, Length, 0)
}
func NetBlockPWriteRequestAddTransferBackends(builder *flatbuffers.Builder, TransferBackends flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(TransferBackends), 0)
}
func NetBlockPWriteRequestStartTransferBackendsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NetBlockPWriteRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
