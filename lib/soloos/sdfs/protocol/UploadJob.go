// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UploadJob struct {
	_tab flatbuffers.Table
}

func GetRootAsUploadJob(buf []byte, offset flatbuffers.UOffsetT) *UploadJob {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UploadJob{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UploadJob) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UploadJob) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UploadJob) NetBlockID(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *UploadJob) NetBlockIDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *UploadJob) Offset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UploadJob) MutateOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *UploadJob) TransferBackends(obj *UploadJobBackend, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *UploadJob) TransferBackendsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func UploadJobStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func UploadJobAddNetBlockID(builder *flatbuffers.Builder, NetBlockID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NetBlockID), 0)
}
func UploadJobStartNetBlockIDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func UploadJobAddOffset(builder *flatbuffers.Builder, Offset int64) {
	builder.PrependInt64Slot(1, Offset, 0)
}
func UploadJobAddTransferBackends(builder *flatbuffers.Builder, TransferBackends flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(TransferBackends), 0)
}
func UploadJobStartTransferBackendsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UploadJobEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
